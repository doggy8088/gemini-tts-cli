name: Build and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        default: '1.0.0'

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: win-x64
            name: Windows x64
          - os: linux-x64
            name: Linux x64
          - os: linux-arm64
            name: Linux ARM64
          - os: osx-x64
            name: macOS x64
          - os: osx-arm64
            name: macOS ARM64

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi

    - name: Update project version
      run: |
        sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.get_version.outputs.VERSION }}<\/Version>/" gemini-tts-cli.csproj

    - name: Restore dependencies
      run: dotnet restore gemini-tts-cli.csproj

    - name: Build and publish for ${{ matrix.name }}
      run: |
        dotnet publish gemini-tts-cli.csproj \
          -c Release \
          --nologo \
          --self-contained \
          -r ${{ matrix.os }} \
          -p:PublishSelfContained=true \
          -p:PublishSingleFile=true \
          -p:DebugType=embedded \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:PublishTrimmed=false \
          -p:EnableCompressionInSingleFile=true \
          -p:SuppressTrimAnalysisWarnings=true \
          -o ./artifacts/${{ matrix.os }}

    - name: Create artifact name
      id: artifact_name
      run: |
        if [[ "${{ matrix.os }}" == win-* ]]; then
          echo "EXECUTABLE_NAME=gemini-tts-cli.exe" >> $GITHUB_OUTPUT
          echo "ARCHIVE_NAME=gemini-tts-cli-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}.zip" >> $GITHUB_OUTPUT
        else
          echo "EXECUTABLE_NAME=gemini-tts-cli" >> $GITHUB_OUTPUT
          echo "ARCHIVE_NAME=gemini-tts-cli-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}.tar.gz" >> $GITHUB_OUTPUT
        fi

    - name: Verify build output
      run: |
        echo "Checking build output in ./artifacts/${{ matrix.os }}/"
        ls -la ./artifacts/${{ matrix.os }}/
        if [[ "${{ matrix.os }}" == win-* ]]; then
          if [ ! -f "./artifacts/${{ matrix.os }}/gemini-tts-cli.exe" ]; then
            echo "Error: gemini-tts-cli.exe not found!"
            exit 1
          fi
        else
          if [ ! -f "./artifacts/${{ matrix.os }}/gemini-tts-cli" ]; then
            echo "Error: gemini-tts-cli executable not found!"
            exit 1
          fi
        fi

    - name: Create Windows archive
      if: startsWith(matrix.os, 'win-')
      run: |
        cd ./artifacts/${{ matrix.os }}
        zip -r ../../${{ steps.artifact_name.outputs.ARCHIVE_NAME }} *

    - name: Create Unix archive
      if: ${{ !startsWith(matrix.os, 'win-') }}
      run: |
        cd ./artifacts/${{ matrix.os }}
        tar -czf ../../${{ steps.artifact_name.outputs.ARCHIVE_NAME }} *

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gemini-tts-cli-${{ matrix.os }}
        path: ${{ steps.artifact_name.outputs.ARCHIVE_NAME }}

  publish-nuget:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: build-and-publish

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update project version
      run: |
        sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.get_version.outputs.VERSION }}<\/Version>/" gemini-tts-cli.csproj

    - name: Restore dependencies
      run: dotnet restore gemini-tts-cli.csproj

    - name: Build
      run: dotnet build gemini-tts-cli.csproj --configuration Release --no-restore

    - name: Pack
      run: dotnet pack gemini-tts-cli.csproj --configuration Release --no-build --output ./nupkg

    - name: Publish to NuGet
      run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      continue-on-error: true

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: build-and-publish

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: Release v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: ./release-artifacts/**/*
        body: |
          ## What's Changed

          ### Installation

          #### Via .NET Global Tool (Recommended)
          ```bash
          dotnet tool install -g GeminiTtsCli
          ```

          #### Manual Installation
          Download the appropriate binary for your platform from the assets below.

          ### Usage
          ```bash
          gemini-tts --instructions "Your instructions" --speaker1 zephyr --text "Text to convert to speech"
          ```

          ### Requirements
          - Set the `GEMINI_API_KEY` environment variable with your Google AI Studio API key

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.VERSION }}...HEAD
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-scoop-manifest:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout default branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.repository.default_branch }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts

    - name: List downloaded artifacts for verification
      env:
        SCOOP_MANIFEST_FILE: gemini-tts-cli.json # Define for this step
      run: |
        echo "Listing artifacts in ./release-artifacts..."
        ls -R ./release-artifacts
        echo "VERSION is: ${{ steps.get_version.outputs.VERSION }}"
        echo "Default branch is: ${{ github.event.repository.default_branch }}"
        echo "Scoop manifest file will be: ${SCOOP_MANIFEST_FILE}"

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Update Scoop Manifest
      env:
        SCOOP_MANIFEST_FILE: gemini-tts-cli.json
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        set -e
        MANIFEST_FILE_PATH="./${SCOOP_MANIFEST_FILE}"

        if [ ! -f "$MANIFEST_FILE_PATH" ]; then
          echo "Error: Scoop manifest file $MANIFEST_FILE_PATH not found in default branch!"
          echo "Please ensure $MANIFEST_FILE_PATH exists in the '${{ github.event.repository.default_branch }}' branch."
          exit 1
        fi

        echo "Updating version to $RELEASE_VERSION in $MANIFEST_FILE_PATH"
        jq --arg version "$RELEASE_VERSION" '.version = $version' "$MANIFEST_FILE_PATH" > tmp.$$.json && mv tmp.$$.json "$MANIFEST_FILE_PATH"

        # Architectures: jq_path_in_json|os_tag_for_artifact_naming|archive_filename_pattern|artifact_upload_name_in_workflow
        ARCHITECTURES=(
          "64bit|win-x64|gemini-tts-cli-${RELEASE_VERSION}-win-x64.zip|gemini-tts-cli-win-x64"
          "amd64.on_linux|linux-x64|gemini-tts-cli-${RELEASE_VERSION}-linux-x64.tar.gz|gemini-tts-cli-linux-x64"
          "amd64.on_darwin|osx-x64|gemini-tts-cli-${RELEASE_VERSION}-osx-x64.tar.gz|gemini-tts-cli-osx-x64"
          "arm64.on_linux|linux-arm64|gemini-tts-cli-${RELEASE_VERSION}-linux-arm64.tar.gz|gemini-tts-cli-linux-arm64"
          "arm64.on_darwin|osx-arm64|gemini-tts-cli-${RELEASE_VERSION}-osx-arm64.tar.gz|gemini-tts-cli-osx-arm64"
        )

        for arch_info in "${ARCHITECTURES[@]}"; do
          IFS='|' read -r jq_path os_tag archive_name artifact_dir_name <<< "$arch_info"

          ARCHIVE_PATH="./release-artifacts/${artifact_dir_name}/${archive_name}"

          echo "Processing for $jq_path: Looking for archive at $ARCHIVE_PATH"
          if [ ! -f "$ARCHIVE_PATH" ]; then
            echo "Error: Archive $ARCHIVE_PATH not found!"
            echo "Listing contents of ./release-artifacts and subdirectories to help debug:"
            find ./release-artifacts -type f
            exit 1
          fi

          SHA256_HASH=$(sha256sum "$ARCHIVE_PATH" | awk '{ print $1 }')
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/v${RELEASE_VERSION}/${archive_name}"

          # Convert dot.path to jq ["bracket"]["path"]
          jq_filter_path=$(echo "$jq_path" | sed 's/\./"]["/g' | sed 's/^/.["]/' | sed 's/$/"]/')

          jq_update_url_filter="${jq_filter_path}.url = \"$DOWNLOAD_URL\""
          jq_update_hash_filter="${jq_filter_path}.hash = \"$SHA256_HASH\""

          echo "Applying to $MANIFEST_FILE_PATH: $jq_update_url_filter and $jq_update_hash_filter"
          jq "$jq_update_url_filter | $jq_update_hash_filter" "$MANIFEST_FILE_PATH" > tmp.$$.json && mv tmp.$$.json "$MANIFEST_FILE_PATH"
          echo "Updated $jq_path in $MANIFEST_FILE_PATH with hash $SHA256_HASH"
        done

        echo "Final manifest content of $MANIFEST_FILE_PATH:"
        cat "$MANIFEST_FILE_PATH"

    - name: Commit and push updated Scoop manifest
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "Update Scoop manifest for v${{ steps.get_version.outputs.VERSION }} [skip ci]"
        branch: ${{ github.event.repository.default_branch }}
        file_pattern: gemini-tts-cli.json # Hardcoded filename for the action
        commit_user_name: "github-actions[bot]"
        commit_user_email: "github-actions[bot]@users.noreply.github.com"
        commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
